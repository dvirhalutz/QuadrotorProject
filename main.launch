<?xml version="1.0"?>
<launch>


	<!-- Init Gazebo World -->
	  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be 		launched -->
	  <include file="$(find gazebo_ros)/launch/empty_world.launch">
	    <arg name="world_name" value="$(find rotor_control)/worlds/construction_site_3.world"/>
	  </include>


	  <!-- Spawn simulated quadrotor uav -->
	  <include file="$(find cvg_sim_gazebo)/launch/spawn_quadrotor.launch" >
	    <arg name="model" value="$(find cvg_sim_gazebo)/urdf/quadrotor_sensors.urdf.xacro"/> 
	  </include>


	<!-- ROSPlan -->
	<include file="$(find rosplan_planning_system)/launch/qrotor_planning_interface.launch" >
		<arg name="domain_path"		value="$(find rotor_control)/common/domain.pddl" />
		<arg name="problem_path"	value="$(find rotor_control)/common/problem.pddl" />
	</include>

	<!-- sim actions -->
	<node name="rosplan_interface_movebetweensquares" pkg="rosplan_planning_system" type="qrotorInterface" respawn="false" output="screen">
      		<param name="knowledge_base"		value="rosplan_knowledge_base" />
		<param name="pddl_action_name"		value="movebetweensquares" />
		<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
		<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
  	</node>
	

	<node name="rosplan_interface_takepic" pkg="rosplan_planning_system" type="qrotorInterface" respawn="false" output="screen">
      		<param name="knowledge_base"		value="rosplan_knowledge_base" />
		<param name="pddl_action_name"		value="takepic" />
		<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
		<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
  	</node>
	

	<node pkg="rosservice" type="rosservice" name="problem_generation_server" args="call --wait /rosplan_problem_interface/problem_generation_server"/> 
	<node pkg="rosservice" type="rosservice" name="planning_server" args="call --wait /rosplan_planner_interface/planning_server"/> 

	<node pkg="rostopic" type="rostopic" name="takeoff" args="pub /ardrone/takeoff std_msgs/Empty {}" output="screen"/>
	<node name="main_Script" pkg="rotor_control" type="mainScript.py"  respawn="false" output="screen" />
</launch>

